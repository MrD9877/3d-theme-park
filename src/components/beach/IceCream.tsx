/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 -t -o src/components/beach/IceCream.tsx public/models/ice-cream/model.gltf 
*/
"use client";

import * as THREE from "three";
import React, { JSX } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { animated, useSpring } from "@react-spring/three";

type GLTFResult = GLTF & {
  nodes: {
    Mesh_iceCream: THREE.Mesh;
    Mesh_iceCream_1: THREE.Mesh;
  };
  materials: {
    purpleLight: THREE.MeshStandardMaterial;
    brownLight: THREE.MeshStandardMaterial;
  };
};

export function IceCream(props: JSX.IntrinsicElements["group"]) {
  const NUMBER_OF_ROTATION = 3;
  const { nodes, materials } = useGLTF("/models/ice-cream/model.gltf") as unknown as GLTFResult;
  const { iceCreamScaling, iceCreamY, coneRotation } = useSpring({
    from: {
      iceCreamScaling: 0.5,
      iceCreamY: 0.4,
      coneRotation: 0,
    },
    to: [
      {
        iceCreamScaling: 1,
        iceCreamY: 0.4,
        coneRotation: 0.66 * Math.PI * NUMBER_OF_ROTATION,
      },
      {
        iceCreamScaling: 1,
        iceCreamY: 0,
        coneRotation: 1.32 * Math.PI * NUMBER_OF_ROTATION,
      },
      {
        iceCreamScaling: 0.5,
        iceCreamY: 0.4,
        coneRotation: 2 * Math.PI * NUMBER_OF_ROTATION,
        delay: 1000,
      },
    ],
    loop: true,
    immediate: true,
    config: {
      mass: 1,
      friction: 20,
      tension: 500,
    },
  });
  return (
    <animated.group rotation-y={coneRotation} {...props} dispose={null}>
      <animated.group position-y={iceCreamY}>
        <animated.mesh geometry={nodes.Mesh_iceCream.geometry} scale-x={iceCreamScaling} scale-y={iceCreamScaling} scale-z={iceCreamScaling}>
          <meshStandardMaterial {...materials.purpleLight} />
        </animated.mesh>
      </animated.group>

      <mesh geometry={nodes.Mesh_iceCream_1.geometry} material={materials.brownLight} />
    </animated.group>
  );
}

useGLTF.preload("/models/ice-cream/model.gltf");
