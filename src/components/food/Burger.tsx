/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 -t -o src/components/food/Burger.tsx public/models/burger/model.gltf 
*/

import * as THREE from "three";
import React, { JSX } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useSpring, a } from "@react-spring/three";

type GLTFResult = GLTF & {
  nodes: {
    bunBottom: THREE.Mesh;
    bunTop: THREE.Mesh;
    cheese: THREE.Mesh;
    patty: THREE.Mesh;
    salad: THREE.Mesh;
    Mesh_tomato: THREE.Mesh;
    Mesh_tomato_1: THREE.Mesh;
  };
  materials: {
    brownLight: THREE.MeshStandardMaterial;
    yellow: THREE.MeshStandardMaterial;
    brownDark: THREE.MeshStandardMaterial;
    green: THREE.MeshStandardMaterial;
    _defaultMat: THREE.MeshStandardMaterial;
    red: THREE.MeshStandardMaterial;
  };
};

export function Burger(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/models/burger/model.gltf") as unknown as GLTFResult;

  const { bottomBunPos, topBunPos, cheesePos, pattyPos, saladPos, tomatoPos } = useSpring<{
    bottomBunPos: [number, number, number];
    topBunPos: [number, number, number];
    cheesePos: [number, number, number];
    pattyPos: [number, number, number];
    saladPos: [number, number, number];
    tomatoPos: [number, number, number];
  }>({
    from: {
      bottomBunPos: [0, 0, 0],
      topBunPos: [0, 0.17, 0],
      cheesePos: [0, 0.086, 0],
      pattyPos: [0, 0.07, 0],
      saladPos: [0, 0.04, 0],
      tomatoPos: [0, 0.136, 0],
    },
    to: [
      {
        bottomBunPos: [0, -0.06, 0],
        topBunPos: [0, 0.23, 0],
        cheesePos: [0, 0.086, 0],
        pattyPos: [0, 0.07, 0],
        saladPos: [0, 0.04, 0],
        tomatoPos: [0, 0.136, 0],
      },
      {
        bottomBunPos: [0, -0.06, 0],
        topBunPos: [0, 0.23, 0],
        cheesePos: [0.27, 0.086, 0.27],
        pattyPos: [-0.27, 0.07, -0.27],
        saladPos: [0.27, 0.04, -0.27],
        tomatoPos: [-0.27, 0.136, 0.27],
      },
      {
        bottomBunPos: [0, 0, 0],
        topBunPos: [0, 0.17, 0],
        cheesePos: [0, 0.086, 0],
        pattyPos: [0, 0.07, 0],
        saladPos: [0, 0.04, 0],
        tomatoPos: [0, 0.136, 0],
      },
    ],
    loop: true,
    immediate: true,
    config: {
      mass: 1,
      tension: 800,
      friction: 20,
    },
  });

  return (
    <group {...props} dispose={null}>
      <a.mesh geometry={nodes.bunBottom.geometry} material={materials.brownLight} position={bottomBunPos} />
      <a.mesh geometry={nodes.bunTop.geometry} material={materials.brownLight} position={topBunPos} />
      <a.mesh geometry={nodes.cheese.geometry} material={materials.yellow} position={cheesePos} scale={[2.793, 1, 1.425]} />
      <a.mesh geometry={nodes.patty.geometry} material={materials.brownDark} position={pattyPos} scale={[1, 1.14, 1]} />
      <a.mesh geometry={nodes.salad.geometry} material={materials.green} position={saladPos} scale={[0.918, 0.75, 0.918]} />
      <a.group position={tomatoPos} scale={[1.56, 0.704, 1.56]}>
        <mesh geometry={nodes.Mesh_tomato.geometry} material={materials._defaultMat} />
        <mesh geometry={nodes.Mesh_tomato_1.geometry} material={materials.red} />
      </a.group>
    </group>
  );
}

useGLTF.preload("/models/burger/model.gltf");
