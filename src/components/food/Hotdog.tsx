/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 -t -o src/components/food/Hotdog.tsx public/models/hot-dog/model.gltf 
*/

import * as THREE from "three";
import React, { JSX } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { animated, useSpring } from "@react-spring/three";
import { Musterd } from "./Musterd";
import { Ketchup } from "./Ketchup";

type GLTFResult = GLTF & {
  nodes: {
    hotDog: THREE.Mesh;
    Mesh_sauce: THREE.Mesh;
    Mesh_sauce_1: THREE.Mesh;
    sausage: THREE.Mesh;
  };
  materials: {
    brownLight: THREE.MeshStandardMaterial;
    yellow: THREE.MeshStandardMaterial;
    red: THREE.MeshStandardMaterial;
    brown: THREE.MeshStandardMaterial;
  };
};

export function Hotdog(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/models/hot-dog/model.gltf") as unknown as GLTFResult;

  const { musterdPosition, musterdRotation, ketchupPosition, ketchupRotation, hotdogMusterdSpread, hotdogKetchupSpread } = useSpring({
    from: {
      musterdPosition: [0, 0.2, 0],
      musterdRotation: 0,
      ketchupPosition: [0, 0.2, 0],
      ketchupRotation: 0,
      hotdogMusterdSpread: 0,
      hotdogKetchupSpread: 0,
    },
    to: [
      {
        musterdPosition: [0, 0.5, 0],
        musterdRotation: -Math.PI,
      },
      {
        musterdPosition: [-0.8, 0.5, 0],
        hotdogMusterdSpread: 1,
      },
      {
        musterdPosition: [0, 0.5, 0],
      },
      {
        musterdPosition: [0, 0.2, 0],
        musterdRotation: 0,
      },
      {
        ketchupPosition: [0, 0.5, 0],
        ketchupRotation: Math.PI,
      },
      {
        ketchupPosition: [0.8, 0.5, 0],
        hotdogKetchupSpread: 1,
      },
      {
        ketchupPosition: [0, 0.5, 0],
      },
      {
        ketchupPosition: [0, 0.2, 0],
        ketchupRotation: 0,
        hotdogMusterdSpread: 0,
        hotdogKetchupSpread: 0,
      },
    ],
    loop: true,
    config: {
      mass: 1,
      tension: 800,
      friction: 80,
    },
  });

  return (
    <group position={[4.5, 1, 2.2]} scale={4} rotation-y={0.34 * Math.PI}>
      <animated.group position={musterdPosition.to((x, y, z) => [x, y, z])}>
        <Musterd rotation-x={musterdRotation} />
      </animated.group>
      {/* hot dog */}
      <group {...props} dispose={null}>
        <mesh geometry={nodes.hotDog.geometry} material={materials.brownLight}>
          <group position={[0, 0.14, 0]} rotation={[Math.PI, 0, -Math.PI]}>
            <animated.mesh geometry={nodes.Mesh_sauce.geometry} material={materials.yellow} scale={hotdogMusterdSpread} />
            <animated.mesh geometry={nodes.Mesh_sauce_1.geometry} material={materials.red} scale={hotdogKetchupSpread} />
          </group>
          <mesh geometry={nodes.sausage.geometry} material={materials.brown} position={[-0.293, 0.092, 0]} rotation={[Math.PI / 2, 0, -Math.PI / 2]} scale={0.93} />
        </mesh>
      </group>

      <animated.group position={ketchupPosition.to((x, y, z) => [x, y, z])}>
        <Ketchup rotation-x={ketchupRotation} />
      </animated.group>
    </group>
  );
}

useGLTF.preload("/models/hot-dog/model.gltf");
